import yfinance as yf
import pandas as pd
import time

def get_top_momentum_indices():
    # List of global indices (expand as needed)
    indices = {
        '^GSPC': 'S&P 500', '^DJI': 'Dow Jones', '^IXIC': 'Nasdaq',
        '^FTSE': 'FTSE 100', '^N225': 'Nikkei 225', '^GDAXI': 'DAX',
        '^FCHI': 'CAC 40', '^AORD': 'ASX 200', '^BSESN': 'Sensex',
        '^KS11': 'KOSPI', '^STI': 'Straits Times', '^MXX': 'IPC Mexico'
    }
    
    # Dictionary to store momentum
    momentum_data = {}
    
    # Fetch data and calculate 6-month momentum (126 trading days)
    for ticker, name in indices.items():
        try:
            data = yf.download(ticker, period='1y', interval='1d', auto_adjust=False)
            if len(data) < 126:  # Ensure at least 126 days of data
                print(f"Insufficient data for {name} ({ticker}): {len(data)} days")
                continue
            # Work with 'Close' Series and drop NaNs
            close_data = data['Close'].dropna()
            if len(close_data) < 126:  # Recheck after dropping NaNs
                print(f"Insufficient valid data for {name} ({ticker}): {len(close_data)} days")
                continue
            momentum_series = close_data.pct_change(periods=126)
            momentum = momentum_series.iloc[-1].item()  # Force scalar conversion
            print(f"Debug - {name} momentum type: {type(momentum)}, value: {momentum}")  # Debug
            if not pd.isna(momentum):  # Check scalar NaN
                momentum_data[name] = momentum * 100  # Convert to percentage
            time.sleep(1)  # Avoid rate limits
        except Exception as e:
            print(f"Error fetching {name} ({ticker}): {e}")
    
    # Sort and get top 10
    top_10 = sorted(momentum_data.items(), key=lambda x: x[1], reverse=True)[:10]
    
    return top_10

if __name__ == "__main__":
    # Example usage
    results = get_top_momentum_indices()
    for name, momentum in results:
        print(f"{name}: {momentum:.2f}%")

